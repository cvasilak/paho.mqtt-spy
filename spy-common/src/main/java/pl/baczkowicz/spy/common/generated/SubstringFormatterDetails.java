//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.7 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Timestamp removed by maven-replacer-plugin to avoid detecting changes - see the project POM for details
//


package pl.baczkowicz.spy.common.generated;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SubstringFormatterDetails complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SubstringFormatterDetails"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="StartTag" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="EndTag" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="KeepTags" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
*/
@SuppressWarnings("all")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SubstringFormatterDetails", propOrder = {
    "startTag",
    "endTag",
    "keepTags"
})
@XmlSeeAlso({
    SubstringConversionFormatterDetails.class,
    SubstringReplaceFormatterDetails.class,
    SubstringExtractFormatterDetails.class
})
public abstract class SubstringFormatterDetails implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "StartTag", required = true)
    protected String startTag;
    @XmlElement(name = "EndTag", required = true)
    protected String endTag;
    @XmlElement(name = "KeepTags")
    protected boolean keepTags;

    /**
     * Default no-arg constructor
     * 
     */
    public SubstringFormatterDetails() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public SubstringFormatterDetails(final String startTag, final String endTag, final boolean keepTags) {
        this.startTag = startTag;
        this.endTag = endTag;
        this.keepTags = keepTags;
    }

    /**
     * Gets the value of the startTag property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStartTag() {
        return startTag;
    }

    /**
     * Sets the value of the startTag property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStartTag(String value) {
        this.startTag = value;
    }

    /**
     * Gets the value of the endTag property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEndTag() {
        return endTag;
    }

    /**
     * Sets the value of the endTag property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEndTag(String value) {
        this.endTag = value;
    }

    /**
     * Gets the value of the keepTags property.
     * 
     */
    public boolean isKeepTags() {
        return keepTags;
    }

    /**
     * Sets the value of the keepTags property.
     * 
     */
    public void setKeepTags(boolean value) {
        this.keepTags = value;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            String theStartTag;
            theStartTag = this.getStartTag();
            strategy.appendField(locator, this, "startTag", buffer, theStartTag, (this.startTag!= null));
        }
        {
            String theEndTag;
            theEndTag = this.getEndTag();
            strategy.appendField(locator, this, "endTag", buffer, theEndTag, (this.endTag!= null));
        }
        {
            boolean theKeepTags;
            theKeepTags = this.isKeepTags();
            strategy.appendField(locator, this, "keepTags", buffer, theKeepTags, true);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SubstringFormatterDetails that = ((SubstringFormatterDetails) object);
        {
            String lhsStartTag;
            lhsStartTag = this.getStartTag();
            String rhsStartTag;
            rhsStartTag = that.getStartTag();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startTag", lhsStartTag), LocatorUtils.property(thatLocator, "startTag", rhsStartTag), lhsStartTag, rhsStartTag, (this.startTag!= null), (that.startTag!= null))) {
                return false;
            }
        }
        {
            String lhsEndTag;
            lhsEndTag = this.getEndTag();
            String rhsEndTag;
            rhsEndTag = that.getEndTag();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endTag", lhsEndTag), LocatorUtils.property(thatLocator, "endTag", rhsEndTag), lhsEndTag, rhsEndTag, (this.endTag!= null), (that.endTag!= null))) {
                return false;
            }
        }
        {
            boolean lhsKeepTags;
            lhsKeepTags = this.isKeepTags();
            boolean rhsKeepTags;
            rhsKeepTags = that.isKeepTags();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "keepTags", lhsKeepTags), LocatorUtils.property(thatLocator, "keepTags", rhsKeepTags), lhsKeepTags, rhsKeepTags, true, true)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            String theStartTag;
            theStartTag = this.getStartTag();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startTag", theStartTag), currentHashCode, theStartTag, (this.startTag!= null));
        }
        {
            String theEndTag;
            theEndTag = this.getEndTag();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endTag", theEndTag), currentHashCode, theEndTag, (this.endTag!= null));
        }
        {
            boolean theKeepTags;
            theKeepTags = this.isKeepTags();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "keepTags", theKeepTags), currentHashCode, theKeepTags, true);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        if (target instanceof SubstringFormatterDetails) {
            final SubstringFormatterDetails copy = ((SubstringFormatterDetails) target);
            {
                Boolean startTagShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.startTag!= null));
                if (startTagShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceStartTag;
                    sourceStartTag = this.getStartTag();
                    String copyStartTag = ((String) strategy.copy(LocatorUtils.property(locator, "startTag", sourceStartTag), sourceStartTag, (this.startTag!= null)));
                    copy.setStartTag(copyStartTag);
                } else {
                    if (startTagShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.startTag = null;
                    }
                }
            }
            {
                Boolean endTagShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.endTag!= null));
                if (endTagShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceEndTag;
                    sourceEndTag = this.getEndTag();
                    String copyEndTag = ((String) strategy.copy(LocatorUtils.property(locator, "endTag", sourceEndTag), sourceEndTag, (this.endTag!= null)));
                    copy.setEndTag(copyEndTag);
                } else {
                    if (endTagShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.endTag = null;
                    }
                }
            }
            {
                Boolean keepTagsShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                if (keepTagsShouldBeCopiedAndSet == Boolean.TRUE) {
                    boolean sourceKeepTags;
                    sourceKeepTags = this.isKeepTags();
                    boolean copyKeepTags = strategy.copy(LocatorUtils.property(locator, "keepTags", sourceKeepTags), sourceKeepTags, true);
                    copy.setKeepTags(copyKeepTags);
                } else {
                    if (keepTagsShouldBeCopiedAndSet == Boolean.FALSE) {
                    }
                }
            }
        }
        return target;
    }

}
