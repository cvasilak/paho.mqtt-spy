//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.7 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Timestamp removed by maven-replacer-plugin to avoid detecting changes - see the project POM for details
//


package pl.baczkowicz.spy.common.generated;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for CharacterReplaceFormatterDetails complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CharacterReplaceFormatterDetails"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://baczkowicz.pl/spy/common}ConversionFormatterDetails"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="CharacterRangeFrom" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="CharacterRangeTo" type="{http://www.w3.org/2001/XMLSchema}int"/&gt;
 *         &lt;element name="WrapCharacter" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
*/
@SuppressWarnings("all")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CharacterReplaceFormatterDetails", propOrder = {
    "characterRangeFrom",
    "characterRangeTo",
    "wrapCharacter"
})
public class CharacterReplaceFormatterDetails
    extends ConversionFormatterDetails
    implements Serializable, Cloneable, CopyTo2, Equals2, HashCode2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "CharacterRangeFrom")
    protected int characterRangeFrom;
    @XmlElement(name = "CharacterRangeTo")
    protected int characterRangeTo;
    @XmlElement(name = "WrapCharacter")
    protected String wrapCharacter;

    /**
     * Default no-arg constructor
     * 
     */
    public CharacterReplaceFormatterDetails() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public CharacterReplaceFormatterDetails(final ConversionMethod format, final int characterRangeFrom, final int characterRangeTo, final String wrapCharacter) {
        super(format);
        this.characterRangeFrom = characterRangeFrom;
        this.characterRangeTo = characterRangeTo;
        this.wrapCharacter = wrapCharacter;
    }

    /**
     * Gets the value of the characterRangeFrom property.
     * 
     */
    public int getCharacterRangeFrom() {
        return characterRangeFrom;
    }

    /**
     * Sets the value of the characterRangeFrom property.
     * 
     */
    public void setCharacterRangeFrom(int value) {
        this.characterRangeFrom = value;
    }

    /**
     * Gets the value of the characterRangeTo property.
     * 
     */
    public int getCharacterRangeTo() {
        return characterRangeTo;
    }

    /**
     * Sets the value of the characterRangeTo property.
     * 
     */
    public void setCharacterRangeTo(int value) {
        this.characterRangeTo = value;
    }

    /**
     * Gets the value of the wrapCharacter property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWrapCharacter() {
        return wrapCharacter;
    }

    /**
     * Sets the value of the wrapCharacter property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWrapCharacter(String value) {
        this.wrapCharacter = value;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            int theCharacterRangeFrom;
            theCharacterRangeFrom = this.getCharacterRangeFrom();
            strategy.appendField(locator, this, "characterRangeFrom", buffer, theCharacterRangeFrom, true);
        }
        {
            int theCharacterRangeTo;
            theCharacterRangeTo = this.getCharacterRangeTo();
            strategy.appendField(locator, this, "characterRangeTo", buffer, theCharacterRangeTo, true);
        }
        {
            String theWrapCharacter;
            theWrapCharacter = this.getWrapCharacter();
            strategy.appendField(locator, this, "wrapCharacter", buffer, theWrapCharacter, (this.wrapCharacter!= null));
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CharacterReplaceFormatterDetails that = ((CharacterReplaceFormatterDetails) object);
        {
            int lhsCharacterRangeFrom;
            lhsCharacterRangeFrom = this.getCharacterRangeFrom();
            int rhsCharacterRangeFrom;
            rhsCharacterRangeFrom = that.getCharacterRangeFrom();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "characterRangeFrom", lhsCharacterRangeFrom), LocatorUtils.property(thatLocator, "characterRangeFrom", rhsCharacterRangeFrom), lhsCharacterRangeFrom, rhsCharacterRangeFrom, true, true)) {
                return false;
            }
        }
        {
            int lhsCharacterRangeTo;
            lhsCharacterRangeTo = this.getCharacterRangeTo();
            int rhsCharacterRangeTo;
            rhsCharacterRangeTo = that.getCharacterRangeTo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "characterRangeTo", lhsCharacterRangeTo), LocatorUtils.property(thatLocator, "characterRangeTo", rhsCharacterRangeTo), lhsCharacterRangeTo, rhsCharacterRangeTo, true, true)) {
                return false;
            }
        }
        {
            String lhsWrapCharacter;
            lhsWrapCharacter = this.getWrapCharacter();
            String rhsWrapCharacter;
            rhsWrapCharacter = that.getWrapCharacter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "wrapCharacter", lhsWrapCharacter), LocatorUtils.property(thatLocator, "wrapCharacter", rhsWrapCharacter), lhsWrapCharacter, rhsWrapCharacter, (this.wrapCharacter!= null), (that.wrapCharacter!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            int theCharacterRangeFrom;
            theCharacterRangeFrom = this.getCharacterRangeFrom();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "characterRangeFrom", theCharacterRangeFrom), currentHashCode, theCharacterRangeFrom, true);
        }
        {
            int theCharacterRangeTo;
            theCharacterRangeTo = this.getCharacterRangeTo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "characterRangeTo", theCharacterRangeTo), currentHashCode, theCharacterRangeTo, true);
        }
        {
            String theWrapCharacter;
            theWrapCharacter = this.getWrapCharacter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "wrapCharacter", theWrapCharacter), currentHashCode, theWrapCharacter, (this.wrapCharacter!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CharacterReplaceFormatterDetails) {
            final CharacterReplaceFormatterDetails copy = ((CharacterReplaceFormatterDetails) draftCopy);
            {
                Boolean characterRangeFromShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                if (characterRangeFromShouldBeCopiedAndSet == Boolean.TRUE) {
                    int sourceCharacterRangeFrom;
                    sourceCharacterRangeFrom = this.getCharacterRangeFrom();
                    int copyCharacterRangeFrom = strategy.copy(LocatorUtils.property(locator, "characterRangeFrom", sourceCharacterRangeFrom), sourceCharacterRangeFrom, true);
                    copy.setCharacterRangeFrom(copyCharacterRangeFrom);
                } else {
                    if (characterRangeFromShouldBeCopiedAndSet == Boolean.FALSE) {
                    }
                }
            }
            {
                Boolean characterRangeToShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, true);
                if (characterRangeToShouldBeCopiedAndSet == Boolean.TRUE) {
                    int sourceCharacterRangeTo;
                    sourceCharacterRangeTo = this.getCharacterRangeTo();
                    int copyCharacterRangeTo = strategy.copy(LocatorUtils.property(locator, "characterRangeTo", sourceCharacterRangeTo), sourceCharacterRangeTo, true);
                    copy.setCharacterRangeTo(copyCharacterRangeTo);
                } else {
                    if (characterRangeToShouldBeCopiedAndSet == Boolean.FALSE) {
                    }
                }
            }
            {
                Boolean wrapCharacterShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.wrapCharacter!= null));
                if (wrapCharacterShouldBeCopiedAndSet == Boolean.TRUE) {
                    String sourceWrapCharacter;
                    sourceWrapCharacter = this.getWrapCharacter();
                    String copyWrapCharacter = ((String) strategy.copy(LocatorUtils.property(locator, "wrapCharacter", sourceWrapCharacter), sourceWrapCharacter, (this.wrapCharacter!= null)));
                    copy.setWrapCharacter(copyWrapCharacter);
                } else {
                    if (wrapCharacterShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.wrapCharacter = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CharacterReplaceFormatterDetails();
    }

}
